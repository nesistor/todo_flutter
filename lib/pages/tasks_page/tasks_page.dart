import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:todo_flutter/pages/tasks_page/page_widgets/custom_dialog.dart';
import 'package:todo_flutter/model/task_model.dart';
import 'package:todo_flutter/sqflite/database_helper.dart';

class TasksPage extends StatefulWidget {
  const TasksPage({Key? key}) : super(key: key);

  @override
  _TasksPageState createState() => _TasksPageState();
}

class _TasksPageState extends State<TasksPage> {
  List<Task> tasks = [];
  bool isDialogVisible = false;
  final DateTime _selectedDay = DateTime.now();

  @override
  void initState() {
    super.initState();
    _fetchTasksFromDatabase(); // Fetch tasks from the database
  }

  Future<void> _fetchTasksFromDatabase() async {
    List<Task> fetchedTasks = await DatabaseHelper().getAllTasks();
    setState(() {
      tasks = fetchedTasks;
    });
  }

  void _cancelTask() {
    setState(() {
      isDialogVisible = false;
    });
  }

  void _showTaskInput() {
    setState(() {
      isDialogVisible = true;
    });
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return CustomDialog(
          onAddPressed: (String title, String description, DateTime selectedDay) async {
            Task newTask = Task(
              id: 0, // This will be auto-generated by the database
              title: title,
              description: description,
              date: selectedDay,
            );

            int taskId = await DatabaseHelper().insertTask(newTask); // Insert the task into the database

            newTask = newTask.copyWith(id: taskId); // Update the task with the generated ID

            setState(() {
              tasks.add(newTask); // Add the updated task to the tasks list
              isDialogVisible = false;
            });
          },
          onCancelPressed: () {
            Navigator.of(context).pop();
            _cancelTask();
          },
          selectedDayIndex: _selectedDay.weekday - 1,
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.black,
        title: const Text(
          'Tasks',
          style: TextStyle(fontSize: 24, color: Colors.white),
        ),
        centerTitle: true,
      ),
      body: Stack(
        children: [
          Visibility(
            visible: !isDialogVisible,
            child: GestureDetector(
              onTap: _showTaskInput,
              child: Container(
                color: const Color.fromRGBO(25, 25, 25, 0.8),
                child: Center(
                  child: Text(
                    'Add your tasks for ${_selectedDay.day}/${_selectedDay.month}/${_selectedDay.year}',
                    style: const TextStyle(fontSize: 20, color: Colors.white),
                  ),
                ),
              ),
            ),
          ),
          Column(
            children: [
              Expanded(
                child: GestureDetector(
                  onTap: !isDialogVisible ? _showTaskInput : null,
                  child: Container(
                    color: const Color.fromRGBO(25, 25, 25, 0.8),
                    child: Center(
                      child: tasks.isEmpty
                          ? null
                          : ListView.builder(
                        itemCount: tasks.length,
                        itemBuilder: (context, index) {
                          return Padding(
                            padding: const EdgeInsets.all(8.0),
                            child: Container(
                              decoration: BoxDecoration(
                                color: Colors.black, // Set the background color of the article to black
                                border: Border.all(color: Colors.indigo.shade900, width: 2), // Add a blue border around the article
                                borderRadius: BorderRadius.circular(12),
                              ),
                              child: ListTile(
                                title: Text(
                                  tasks[index].title,
                                  style: const TextStyle(color: Colors.white),
                                ),
                                subtitle: Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Text(
                                      tasks[index].description,
                                      style: const TextStyle(color: Colors.white, fontSize: 12),
                                    ),
                                    Text(
                                      'Date: ${DateFormat('dd-MM-yyyy').format(tasks[index].date)}', // Format date as needed
                                      style: const TextStyle(color: Colors.white, fontSize: 12),
                                    ),
                                  ],
                                ),
                              ),
                            ),
                          );
                        },
                      )
                    ),
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }
}
