import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:todo_flutter/pages/tasks_page/page_widgets/custom_dialog.dart';
import 'package:todo_flutter/model/task_model.dart';
import 'package:todo_flutter/sqflite/database_helper.dart';

import '../../utils/utils.dart';

class TasksPage extends StatefulWidget {
  const TasksPage({Key? key}) : super(key: key);

  @override
  _TasksPageState createState() => _TasksPageState();
}

class _TasksPageState extends State<TasksPage> {
  List<Task> tasks = [];
  bool isDialogVisible = false;
  final DateTime _selectedDay = DateTime.now();

  @override
  void initState() {
    super.initState();
    _fetchTasksFromDatabase(); // Fetch tasks from the database
  }

  Future<void> _fetchTasksFromDatabase() async {
    List<Task> fetchedTasks = await DatabaseHelper().getAllTasks();
    setState(() {
      tasks = fetchedTasks;
    });
  }

  void _cancelTask() {
    setState(() {
      isDialogVisible = false;
    });
  }

  void _showTaskInput() {
    setState(() {
      isDialogVisible = true;
    });
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return CustomDialog(
          onAddPressed: (String title, String description, DateTime selectedDay) async {
            Task newTask = Task(
              id: 0, // This will be auto-generated by the database
              title: title,
              description: description,
              date: selectedDay,
            );

            int taskId = await DatabaseHelper().insertTask(newTask); // Insert the task into the database

            newTask = newTask.copyWith(id: taskId); // Update the task with the generated ID

            setState(() {
              tasks.add(newTask); // Add the updated task to the tasks list
              isDialogVisible = false;
            });
          },
          onCancelPressed: () {
            Navigator.of(context).pop();
            _cancelTask();
          },
          selectedDayIndex: _selectedDay.weekday - 1,
        );
      },
    );
  }

  void _showEditDialog(Task task) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return CustomDialog(
          onAddPressed: (String title, String description, DateTime selectedDay) async {
            Task updatedTask = Task(
              id: task.id,
              title: title,
              description: description,
              date: selectedDay,
            );

            await DatabaseHelper().updateTask(updatedTask);

            setState(() {
              int taskIndex = tasks.indexWhere((element) => element.id == task.id);

              if (taskIndex != -1) {
                tasks[taskIndex] = updatedTask;
              }
            });

          },
          onCancelPressed: () {
            Navigator.of(context).pop();
          },
          initialTitle: task.title,
          initialDescription: task.description,
          initialSelectedDay: task.date,
          selectedDayIndex: task.date.weekday - 1,
        );
      },
    );
  }

  void _onSuccessfulTask(Task task) async {
    await DatabaseHelper().insertTaskOnSuccessful(task);
    setState(() {
      tasks.remove(task);
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.black,
        title: const Text(
          'Tasks',
          style: TextStyle(fontSize: 24, color: Colors.white),
        ),
        centerTitle: true,
      ),
      body: Stack(
        children: [
          Visibility(
            visible: !isDialogVisible,
            child: GestureDetector(
              onTap: _showTaskInput,
              child: Container(
                color: const Color.fromRGBO(25, 25, 25, 0.8),
                child: Center(
                  child: Text(
                    'Add your tasks for ${_selectedDay.day}/${_selectedDay.month}/${_selectedDay.year}',
                    style: const TextStyle(fontSize: 20, color: Colors.white),
                  ),
                ),
              ),
            ),
          ),
          Column(
            children: [
              Expanded(
                child: GestureDetector(
                  onTap: !isDialogVisible ? _showTaskInput : null,
                  child: Container(
                    color: const Color.fromRGBO(25, 25, 25, 0.8),
                    child: Center(
                      child: tasks.isEmpty
                          ? null
                          : ListView.builder(
                        itemCount: tasks.length,
                        itemBuilder: (context, index) {
                          return Padding(
                            padding: const EdgeInsets.all(8.0),
                            child: Dismissible(
                              key: Key(tasks[index].id.toString()),
                              direction: DismissDirection.horizontal, // Swipe both ways
                              background: Container(
                                alignment: Alignment.centerLeft,
                                color: Colors.green, // Background color when swiping right
                                child: const Padding(
                                  padding: EdgeInsets.only(right: 16.0),
                                  child: Icon(Icons.check, color: Colors.white),
                                ),
                              ),
                              secondaryBackground: Container(
                                alignment: Alignment.centerRight,
                                color: Colors.red, // Background color when swiping left
                                child: const Padding(
                                  padding: EdgeInsets.only(left: 16.0),
                                  child: Icon(Icons.delete, color: Colors.white),
                                ),
                              ),
                              onDismissed: (direction) {
                                if (direction == DismissDirection.startToEnd) {
                                  _onSuccessfulTask(tasks[index]);
                                  showSnackBar(context, "Congratulations that you were able to complete the task");
                                  DatabaseHelper().deleteTask(tasks[index].id);
                                  setState(() {
                                    tasks.removeAt(index);
                                  });
                                } else if (direction == DismissDirection.endToStart) {
                                  DatabaseHelper().deleteTask(tasks[index].id);
                                  setState(() {
                                    tasks.removeAt(index);
                                  });
                                  showSnackBar(context, "Task deleted successfully");
                                }
                              },
                              child: Container(
                                decoration: BoxDecoration(
                                  color: Colors.black,
                                  border: Border.all(color: Colors.indigo.shade900, width: 2),
                                  borderRadius: BorderRadius.circular(12),
                                ),
                                child: ListTile(
                                  title: Text(
                                    tasks[index].title,
                                    style: const TextStyle(color: Colors.white),
                                  ),
                                  subtitle: Column(
                                    crossAxisAlignment: CrossAxisAlignment.start,
                                    children: [
                                      Text(
                                        tasks[index].description,
                                        style: const TextStyle(color: Colors.white, fontSize: 12),
                                      ),
                                      Text(
                                        'Date: ${DateFormat('dd-MM-yyyy').format(tasks[index].date)}',
                                        style: const TextStyle(color: Colors.white, fontSize: 12),
                                      ),
                                    ],
                                  ),
                                  trailing: IconButton(
                                    icon: const Icon(Icons.edit, color: Colors.white, size: 12),
                                    onPressed: () {
                                      _showEditDialog(tasks[index]);
                                    },
                                  ),
                                ),
                              ),
                            ),
                          );
                        },
                      ),
                    ),
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }
}
